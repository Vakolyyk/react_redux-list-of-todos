{"version":3,"sources":["store/index.ts","components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["LOAD_TODOS","SELECT_USER","LOAD_USER","GET_ERROR","DELETE_TODO","actions","todos","type","userId","user","message","id","selectors","state","errorLoad","initialState","store","createStore","action","filter","todo","composeWithDevTools","TodoList","useSelector","selectedUserId","errorTodos","dispatch","useDispatch","useState","filterByTitle","setFilterByTitle","filterByComplete","setFilterComplete","visibleTodos","setVisibleTodos","useEffect","queryToLower","toLowerCase","titleToLower","title","includes","completed","className","placeholder","value","onChange","event","target","onClick","sort","Math","random","map","classNames","checked","readOnly","BASE_URL","getTodosFromServer","a","fetch","response","json","getUserFromServer","CurrentUser","setErrorLoad","getUser","userFromServer","name","email","phone","App","getTodos","todosFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a477a092.chunk.js","sourcesContent":["import { AnyAction, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nconst LOAD_TODOS = 'LOAD_TODOS';\nconst SELECT_USER = 'SELECT_USER';\nconst LOAD_USER = 'LOAD_USER';\nconst GET_ERROR = 'GET_ERROR';\nconst DELETE_TODO = 'DELETE_TODO';\n\nexport const actions = {\n  loadTodos: (todos: Todo[]) => ({\n    type: LOAD_TODOS,\n    todos,\n  }),\n  selectUser: (userId: number) => ({\n    type: SELECT_USER,\n    userId,\n  }),\n  loadUser: (user: User | null) => ({\n    type: LOAD_USER,\n    user,\n  }),\n  getError: (message: string) => ({\n    type: GET_ERROR,\n    message,\n  }),\n  deleteTodo: (id: number) => ({\n    type: DELETE_TODO,\n    id,\n  }),\n};\n\nexport const selectors = {\n  loadTodos: (state: State) => state.todos,\n  getUserId: (state: State) => state.userId,\n  getError: (state: State) => state.errorLoad,\n  loadUser: (state: State) => state.user,\n};\n\ninterface State {\n  todos: Todo[];\n  userId: number;\n  user: User | null;\n  errorLoad: string;\n}\n\nconst initialState: State = {\n  todos: [],\n  userId: 0,\n  user: null,\n  errorLoad: '',\n};\n\nconst reducer = (state: State = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case LOAD_TODOS:\n      return {\n        ...state,\n        todos: action.todos,\n      };\n\n    case SELECT_USER:\n      return {\n        ...state,\n        userId: action.userId,\n      };\n\n    case LOAD_USER:\n      return {\n        ...state,\n        user: action.user,\n      };\n\n    case GET_ERROR:\n      return {\n        ...state,\n        errorLoad: action.message,\n      };\n\n    case DELETE_TODO:\n      return {\n        ...state,\n        todos: state.todos.filter(todo => todo.id !== action.id),\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const store = createStore(\n  reducer,\n  composeWithDevTools(),\n);\n","import classNames from 'classnames';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { actions, selectors } from '../../store';\nimport './TodoList.scss';\n\nexport const TodoList: React.FC = () => {\n  const todos = useSelector(selectors.loadTodos);\n  const selectedUserId = useSelector(selectors.getUserId);\n  const errorTodos = useSelector(selectors.getError);\n  const dispatch = useDispatch();\n\n  const [filterByTitle, setFilterByTitle] = useState('');\n  const [filterByComplete, setFilterComplete] = useState('all');\n  const [visibleTodos, setVisibleTodos] = useState(todos);\n\n  const getFilteredTodos = () => {\n    const filterTodo = (todo: Todo) => {\n      const queryToLower = filterByTitle.toLowerCase();\n      const titleToLower = todo.title.toLowerCase();\n\n      switch (filterByComplete) {\n        case 'all':\n          return titleToLower.includes(queryToLower);\n        case 'active':\n          return titleToLower.includes(queryToLower) && !todo.completed;\n        case 'completed':\n          return titleToLower.includes(queryToLower) && todo.completed;\n        default:\n          return todos;\n      }\n    };\n\n    return todos.filter(filterTodo);\n  };\n\n  const removeTodo = (id: number) => {\n    dispatch(actions.deleteTodo(id));\n  };\n\n  useEffect(() => {\n    setVisibleTodos(getFilteredTodos());\n  }, [filterByComplete, filterByTitle, todos]);\n\n  const randomizer = () => {\n    setVisibleTodos([...visibleTodos].sort(() => Math.random() - 0.5));\n  };\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__filter\">\n        <input\n          type=\"text\"\n          className=\"TodoList__field\"\n          placeholder=\"Enter title\"\n          data-cy=\"filterByTitle\"\n          value={filterByTitle}\n          onChange={(event) => setFilterByTitle(event.target.value)}\n        />\n\n        <select\n          className=\"TodoList__field\"\n          value={filterByComplete}\n          onChange={(event) => {\n            setFilterComplete(event.target.value);\n          }}\n        >\n          <option value=\"all\">\n            All\n          </option>\n          <option value=\"active\">\n            Active\n          </option>\n          <option value=\"completed\">\n            Completed\n          </option>\n        </select>\n\n        <button\n          type=\"button\"\n          className=\"button TodoList__user-button--selected\"\n          onClick={randomizer}\n        >\n          Randomize\n        </button>\n      </div>\n\n      <div className=\"TodoList__list-container\">\n        {!errorTodos\n          ? (\n            <ul className=\"TodoList__list\" data-cy=\"listOfTodos\">\n              {visibleTodos.map(todo => (\n                <li\n                  key={todo.id}\n                  className={classNames(\n                    'TodoList__item',\n                    {\n                      'TodoList__item--unchecked': !todo.completed,\n                      'TodoList__item--checked': todo.completed,\n                    },\n                  )}\n                >\n                  <label>\n                    <input\n                      type=\"checkbox\"\n                      checked={todo.completed}\n                      readOnly\n                    />\n                    <p>{todo.title}</p>\n                  </label>\n                  <div className=\"buttons\">\n                    <button\n                      className={classNames(\n                        'TodoList__user-button',\n                        'button',\n                        {\n                          'TodoList__user-button--selected':\n                            todo.userId === selectedUserId,\n                        },\n                      )}\n                      type=\"button\"\n                      data-cy=\"userButton\"\n                      onClick={() => {\n                        dispatch(actions.selectUser(todo.userId));\n                      }}\n                    >\n                      User&nbsp;#\n                      {todo.userId}\n                    </button>\n                    <button\n                      className=\"button button__delete\"\n                      type=\"button\"\n                      onClick={() => removeTodo(todo.id)}\n                    >\n                      Remove\n                    </button>\n                  </div>\n                </li>\n              ))}\n            </ul>\n          )\n          : <p>{errorTodos}</p>}\n      </div>\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\nexport const getTodosFromServer = async () => {\n  const response = await fetch(`${BASE_URL}/todos`);\n\n  return response.json();\n};\n\nexport const getUserFromServer = async (userId: number) => {\n  const response = await fetch(`${BASE_URL}/users/${userId}`);\n\n  return response.json();\n};\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getUserFromServer } from '../../api/api';\nimport { actions, selectors } from '../../store';\nimport './CurrentUser.scss';\n\nexport const CurrentUser: React.FC = () => {\n  const user = useSelector(selectors.loadUser);\n  const userId = useSelector(selectors.getUserId);\n  const dispatch = useDispatch();\n\n  const [errorLoad, setErrorLoad] = useState('');\n\n  useEffect(() => {\n    const getUser = async () => {\n      try {\n        setErrorLoad('');\n        dispatch(actions.loadUser(null));\n        const userFromServer = await getUserFromServer(userId);\n\n        dispatch(actions.loadUser(userFromServer));\n      } catch {\n        setErrorLoad('Can not load user!');\n      }\n    };\n\n    getUser();\n  }, [userId]);\n\n  return (\n    <>\n      {user ? (\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              Selected user:\n              {user.id}\n            </span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\" data-cy=\"userName\">\n            {user.name}\n          </h3>\n\n          <p className=\"CurrentUser__email\">\n            {user.email}\n          </p>\n\n          <p className=\"CurrentUser__phone\">\n            {user.phone}\n          </p>\n\n          <button\n            className=\"button button__clear\"\n            type=\"button\"\n            onClick={() => (\n              dispatch(actions.selectUser(0))\n            )}\n          >\n            Clear\n          </button>\n        </div>\n      ) : (\n        <p>{errorLoad}</p>\n      )}\n    </>\n  );\n};\n","import React, { useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodosFromServer } from './api/api';\nimport { actions, selectors } from './store';\n\nconst App: React.FC = () => {\n  // const todos = useSelector(selectors.loadTodos);\n  const selectedUserId = useSelector(selectors.getUserId);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const getTodos = async () => {\n      try {\n        const todosFromServer = await getTodosFromServer();\n\n        dispatch(actions.loadTodos(todosFromServer));\n      } catch {\n        dispatch(actions.getError('Can not load todos!'));\n      }\n    };\n\n    getTodos();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport { store } from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}